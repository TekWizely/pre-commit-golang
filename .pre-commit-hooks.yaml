# ==============================================================================
# my-cmd
#   * File-based
#   * Executes if any .go files modified
# ==============================================================================
-   id: my-cmd
    name: 'my-cmd'
    entry: my-cmd.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run '$ARGS[0] [$ARGS[1:]] $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# my-cmd-mod
#   * Folder-Based
#   * Recursive
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: my-cmd-mod
    name: 'my-cmd-mod'
    entry: my-cmd-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); $ARGS[0] [$ARGS[1:]] ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# my-cmd-pkg
#   * Folder-Based
#   * Targets folder containing staged file
#   * Executes if any .go files modified
# ==============================================================================
-   id: my-cmd-pkg
    name: 'my-cmd-pkg'
    entry: my-cmd-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run '$ARGS[0] [$ARGS[1:]] ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# my-cmd-repo
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# ==============================================================================
-   id: my-cmd-repo
    name: 'my-cmd-repo'
    entry: my-cmd-repo.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run '$ARGS[0] [$ARGS[1:]]' in the repo root folder"
    pass_filenames: false

# ==============================================================================
# my-cmd-repo-mod
#   * Repo-Based
#   * Recursive
#   * Targets ALL folders with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: my-cmd-repo-mod
    name: 'my-cmd-repo-mod'
    entry: my-cmd-repo-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root); $ARGS[0] [$ARGS[1:]] /...' for each module in the repo"
    pass_filenames: false

# ==============================================================================
# my-cmd-repo-pkg
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# ==============================================================================
-   id: my-cmd-repo-pkg
    name: 'my-cmd-repo-pkg'
    entry: my-cmd-repo-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run '$ARGS[0] [$ARGS[1:]] ./...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-build-mod
#   * Folder-Based
#   * Recursive
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-build-mod
    name: 'go-build-mod'
    entry: go-build-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); go build -o /dev/null [$ARGS] ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-build-pkg
#   * Folder-Based
#   * Targets folder containing staged file
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-build-pkg
    name: 'go-build-pkg'
    entry: go-build-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'go build -o /dev/null [$ARGS] ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-build-repo-mod
#   * Repo-Based
#   * Recursive
#   * Targets ALL folders with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-build-repo-mod
    name: 'go-build-repo-mod'
    entry: go-build-repo-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root); go build -o /dev/null [$ARGS] ./...' for each module in the repo"
    pass_filenames: false

# ==============================================================================
# go-build-repo-pkg
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-build-repo-pkg
    name: 'go-build-repo-pkg'
    entry: go-build-repo-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'go build -o /dev/null [$ARGS] ./...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-critic
#   * File-based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-critic
    name: 'go-critic'
    entry: go-critic.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'gocritic check [$ARGS] $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-fmt
#   * File-based
#   * Executes if any .go files modified
# NOTES:
#   `go fmt` delegates to `gofmt`, so we'll invote `gofmt` directly.
# ==============================================================================
-   id: go-fmt
    name: 'go-fmt'
    entry: go-fmt.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'gofmt -l -d [$ARGS] $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-fmt-repo
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# NOTES:
#   `go fmt` delegates to `gofmt`, so we'll invote `gofmt` directly.
# ==============================================================================
-   id: go-fmt-repo
    name: 'go-fmt-repo'
    entry: go-fmt-repo.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'gofmt -l -d [$ARGS] .' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-fumpt
#   * File-based
#   * Executes if any .go files modified
# NOTES:
#   Replaces go-fmt
# ==============================================================================
-   id: go-fumpt
    name: 'go-fumpt'
    entry: go-fumpt.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'fumpt -l -d [$ARGS] $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-fumpt-repo
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# NOTES:
#   Replaces go-fmt-repo
# ==============================================================================
-   id: go-fumpt-repo
    name: 'go-fumpt-repo'
    entry: go-fumpt-repo.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'fumpt -l -d [$ARGS] .' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-imports
#   * File-based
#   * Executes if any .go files modified
# NOTES:
#   Replaces go-fmt
# ==============================================================================
-   id: go-imports
    name: 'go-imports'
    entry: go-imports.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'goimports -l -d [$ARGS] $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-imports-repo
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# NOTES:
#   Replaces go-fmt-repo
# ==============================================================================
-   id: go-imports-repo
    name: 'go-imports-repo'
    entry: go-imports-repo.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'goimports -l -d [$ARGS] .' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-lint
#   * File-based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-lint
    name: 'go-lint'
    entry: go-lint.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'golint -set_exit_status [$ARGS] $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-mod-tidy
#   * Folder-Based
#   * Recursive
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-mod-tidy
    name: 'go-mod-tidy'
    entry: go-mod-tidy.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); go mod tidy [$ARGS]' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-mod-tidy-repo
#   * Repo-Based
#   * Recursive
#   * Targets ALL folders with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-mod-tidy-repo
    name: 'go-mod-tidy-repo'
    entry: go-mod-tidy-repo.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root); go mod tidy [$ARGS]' for each module in the repo"
    pass_filenames: false

# ==============================================================================
# go-returns
#   * File-based
#   * Executes if any .go files modified
# NOTES:
#   Replaces go-imports & go-fmt
# ==============================================================================
-   id: go-returns
    name: 'go-returns'
    entry: go-returns.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'goreturns -l -d [$ARGS] $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-returns-repo
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# NOTES:
#   Replaces go-imports-repo & go-fmt-repo
# ==============================================================================
-   id: go-returns-repo
    name: 'go-returns-repo'
    entry: go-returns-repo.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'goreturns -l -d [$ARGS] .' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-revive
#   * File-based
#   * Executes if any .go files modified
#   * Executes if revive.toml modified
#   * Adds arg '-config=revive.toml' if present
# NOTE: Does nothing if ONLY revive.toml is modified (ie no .go files modified)
# ==============================================================================
-   id: go-revive
    name: 'go-revive'
    entry: go-revive.sh
    files: '(\.go$)|(\brevive\.toml$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'revive [$ARGS] $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-revive-mod
#   * Folder-Based
#   * Recursive
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
#   * Executes if revive.toml modified
#   * Adds arg '-config=revive.toml' if present
# ==============================================================================
-   id: go-revive-mod
    name: 'go-revive-mod'
    entry: go-revive-mod.sh
    files: '(\.go$)|(\bgo\.mod$)|(\brevive\.toml$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); revive [$ARGS] ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-revive-repo-mod
#   * Repo-Based
#   * Recursive
#   * Targets ALL folders with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
#   * Executes if revive.toml modified
#   * Adds arg '-config=revive.toml' if present
# ==============================================================================
-   id: go-revive-repo-mod
    name: 'go-revive-repo-mod'
    entry: go-revive-repo-mod.sh
    files: '(\.go$)|(\bgo\.mod$)|(\brevive\.toml$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root); revive [$ARGS] ./...' for each module in the repo"
    pass_filenames: false

# ==============================================================================
# go-sec-mod
#   * Folder-Based
#   * Recursive
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-sec-mod
    name: 'go-sec-mod'
    entry: go-sec-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); gosec [$ARGS] ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-sec-pkg
#   * Folder-Based
#   * Targets folder containing staged file
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-sec-pkg
    name: 'go-sec-pkg'
    entry: go-sec-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'gosec [$ARGS] ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-sec-repo-mod
#   * Repo-Based
#   * Recursive
#   * Targets ALL folders with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-sec-repo-mod
    name: 'go-sec-repo-mod'
    entry: go-sec-repo-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root); gosec [$ARGS] ./...' for each module in the repo"
    pass_filenames: false

# ==============================================================================
# go-sec-repo-pkg
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-sec-repo-pkg
    name: 'go-sec-repo-pkg'
    entry: go-sec-repo-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'gosec [$ARGS] ./...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-staticcheck-mod
#   * Folder-Based
#   * Recursive
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-staticcheck-mod
    name: 'go-staticcheck-mod'
    entry: go-staticcheck-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); staticcheck [$ARGS] ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-staticcheck-pkg
#   * Folder-Based
#   * Targets folder containing staged file
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-staticcheck-pkg
    name: 'go-staticcheck-pkg'
    entry: go-staticcheck-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'staticcheck [$ARGS] ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-staticcheck-repo-mod
#   * Repo-Based
#   * Recursive
#   * Targets ALL folders with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-staticcheck-repo-mod
    name: 'go-staticcheck-repo-mod'
    entry: go-staticcheck-repo-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root); staticcheck [$ARGS] ./...' for each module in the repo"
    pass_filenames: false

# ==============================================================================
# go-staticcheck-repo-pkg
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-staticcheck-repo-pkg
    name: 'go-staticcheck-repo-pkg'
    entry: go-staticcheck-repo-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'staticcheck [$ARGS] ./...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-test-mod
#   * Folder-Based
#   * Recursive
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-test-mod
    name: 'go-test-mod'
    entry: go-test-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); go test [$ARGS] ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-test-pkg
#   * Folder-Based
#   * Targets folder containing staged file
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-test-pkg
    name: 'go-test-pkg'
    entry: go-test-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'go test [$ARGS] ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-test-repo-mod
#   * Repo-Based
#   * Recursive
#   * Targets ALL folders with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-test-repo-mod
    name: 'go-test-repo-mod'
    entry: go-test-repo-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root); go test [$ARGS] ./...' for each module in the repo"
    pass_filenames: false

# ==============================================================================
# go-test-repo-pkg
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-test-repo-pkg
    name: 'go-test-repo-pkg'
    entry: go-test-repo-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'go test [$ARGS] ./...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-vet-mod
#   * Folder-Based
#   * Recursive
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-vet-mod
    name: 'go-vet-mod'
    entry: go-vet-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); go vet [$ARGS] ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-vet-pkg
#   * Folder-Based
#   * Targets folder containing staged file
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-vet-pkg
    name: 'go-vet-pkg'
    entry: go-vet-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'go vet [$ARGS] ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-vet-repo-mod
#   * Repo-Based
#   * Recursive
#   * Targets ALL folders with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-vet-repo-mod
    name: 'go-vet-repo-mod'
    entry: go-vet-repo-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root); go vet [$ARGS] ./...' for each module in the repo"
    pass_filenames: false

# ==============================================================================
# go-vet-repo-pkg
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-vet-repo-pkg
    name: 'go-vet-repo-pkg'
    entry: go-vet-repo-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'go vet [$ARGS] ./...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-vet
#   * File-based
#   * Executes if any .go files modified
# NOTES:
#   `go vet` appears to work on single files when given them as args.
# ==============================================================================
-   id: go-vet
    name: 'go-vet'
    entry: go-vet.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'go vet [$ARGS] $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# golangci-lint-mod
#   * Folder-Based
#   * Recursive
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: golangci-lint-mod
    name: 'golangci-lint-mod'
    entry: golangci-lint-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); golangci-lint run [$ARGS] ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# golangci-lint-pkg
#   * Folder-Based
#   * Targets folder containing staged file
#   * Executes if any .go files modified
# ==============================================================================
-   id: golangci-lint-pkg
    name: 'golangci-lint-pkg'
    entry: golangci-lint-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'golangci-lint run [$ARGS] ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# golangci-lint-repo-mod
#   * Repo-Based
#   * Recursive
#   * Targets ALL folders with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: golangci-lint-repo-mod
    name: 'golangci-lint-repo-mod'
    entry: golangci-lint-repo-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root); golangci-lint run [$ARGS] ./...' for each module in the repo"
    pass_filenames: false

# ==============================================================================
# golangci-lint-repo-pkg
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# ==============================================================================
-   id: golangci-lint-repo-pkg
    name: 'golangci-lint-repo-pkg'
    entry: golangci-lint-repo-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'golangci-lint run [$ARGS] ./...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# golangci-lint
#   * File-based
#   * Executes if any .go files modified
# NOTES:
#   `golangci-lint` appears to work on single files when given them as args.
# ==============================================================================
-   id: golangci-lint
    name: 'golangci-lint'
    entry: golangci-lint.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'golangci-lint run [$ARGS] $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-structslop-mod
#   * Folder-Based
#   * Recursive
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-structslop-mod
    name: 'go-structslop-mod'
    entry: go-structslop-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); structslop [$ARGS] ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-structslop-pkg
#   * Folder-Based
#   * Targets folder containing staged file
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-structslop-pkg
    name: 'go-structslop-pkg'
    entry: go-structslop-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'structslop [$ARGS] ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-structslop-repo-mod
#   * Repo-Based
#   * Recursive
#   * Targets ALL folders with a go.mod file
#   * Executes if any .go files modified
#   * Executes if go.mod modified
# ==============================================================================
-   id: go-structslop-repo-mod
    name: 'go-structslop-repo-mod'
    entry: go-structslop-repo-mod.sh
    files: '(\.go$)|(\bgo\.mod$)'
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'cd $(mod_root); structslop [$ARGS] ./...' for each module in the repo"
    pass_filenames: false

# ==============================================================================
# go-structslop-repo-pkg
#   * Repo-Based
#   * Recursive
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-structslop-repo-pkg
    name: 'go-structslop-repo-pkg'
    entry: go-structslop-repo-pkg.sh
    types: [go]
    exclude: '(^|/)vendor/'
    language: 'script'
    description: "Run 'structslop [$ARGS] ./...' in repo root folder"
    pass_filenames: false
